package com.sdase.malware.scanner.service.impl;

import com.sdase.malware.scanner.service.UrlChecker;
import org.owasp.html.HtmlPolicyBuilder;
import org.owasp.html.PolicyFactory;
import org.springframework.stereotype.Service;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;

/**
 * Implementation of the UrlValidator interface for validating URLs with additional security checks.
 */
@Service
public class UrlCheckerImpl implements UrlChecker {

    // List of dangerous file extensions to check against
    private static final List<String> DANGEROUS_EXTENSIONS = Arrays.asList("exe", "dll", "bat", "cmd", "sh");

    // HTML Sanitizer policy to prevent XSS attacks
    private static final PolicyFactory HTML_POLICY = new HtmlPolicyBuilder().toFactory();

    /**
     {@inheritDoc}
     */
    @Override
    public boolean isUrlValid(String inputUrl) {
        // Sanitize the input to prevent XSS attacks
        String sanitizedUrl = sanitizeInput(inputUrl);

        try {
            // Check for a valid URL after sanitizing
            URL url = new URL(sanitizedUrl);

            // Additional security check: Ensure the protocol is "http" or "https"
            String protocol = url.getProtocol().toLowerCase();
            if (!"http".equals(protocol) && !"https".equals(protocol)) {
                return false;
            }

            // Check for dangerous file extensions
            String path = url.getPath().toLowerCase();
            if (containsDangerousExtension(path)) {
                return false;
            }

            return true;

        } catch (MalformedURLException e) {
            return false;
        }
    }

    /**
     * Checks if the given URL path contains a dangerous file extension.
     *
     * @param path The URL path to check.
     * @return True if the path contains a dangerous extension, false otherwise.
     */
    private boolean containsDangerousExtension(String path) {
        for (String extension : DANGEROUS_EXTENSIONS) {
            if (path.endsWith("." + extension)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Sanitizes the url to prevent XSS attacks using the OWASP Java HTML Sanitizer.
     *
     * @param url The url to be sanitized.
     * @return The sanitized string without potentially harmful HTML or JavaScript content.
     */
    private String sanitizeInput(String url) {
        // Use HTML Sanitizer to clean HTML and prevent XSS attacks
        return HTML_POLICY.sanitize(url);
    }
}
